{% set version = "3.4.0.0" %}
{% set abiversion = version.split('.')[0] %}
{% set libversion = version.split('.')[:3] | join('.') %}
{% set cuda_version = "12.6" %}      # min version holoscan works with
{% set libtorch_version = "2.5.*" %}
{% set onnx_version = "1.18.1.*" %}
{% set python_version = "3.12" %}    # holoscan python libs compiled for python 3.12
{% set ucx_version = "1.17.0.*" %}
{% set yaml_cpp_version = "0.7.0.*" %}
{% set platform = "linux-x86_64" %}  # [linux64]
{% set platform = "linux-sbsa" %}    # [aarch64]
{% set extension = "tar.xz" %}


{% set sha256 = "b9cf96dba3e4eb4813c082c1bf95976a90dc73e2b15862c134c44c0419465513" %}  # [linux64]
{% set sha256 = "4fe694755a095db1e7fdea8c762bd18c1968aa43946034738370fc5d8e122a1e" %}  # [aarch64 and arm_variant_type == "sbsa"]

package:
  name: holoscan-split
  version: {{ version }}

source:
  url: https://kitmaker-web.nvidia.com/kitpicks/holoscan-release/3.4.0/001/redist/holoscan/holoscan/{{ platform }}/holoscan-{{ platform }}-{{ version }}-archive.{{ extension }}
  sha256: {{ sha256 }}

build:
  number: 0
  skip: true  # [not (linux64 or aarch64)]
  skip: true  # [cuda_compiler_version in (None, "None", "") or (cuda_compiler_version or "").startswith("11")]

requirements:
  build:
    - cf-nvidia-tools 1  # [linux]
    - python ={{ python_version }}
  host:
    - python ={{ python_version }}

outputs:
  - name: libholoscan
    build:
      missing_dso_whitelist:
        - "*libcuda.so*"              # driver
        - "*libgdrapi.so*"            # part of gdrcopy yet not pre-built for conda-forge channel
        - "*libnvidia-ml.so*"         # driver
        - "*libnvinfer_plugin.so*"    # NVIDIA's TensorRT not on conda-forge
        - "*libnvonnxparser.so*"      # NVIDIA's TensorRT not on conda-forge
        - "*libtorchvision.so*"       # not available even in torchvision package
        - "*libv4l2.so*"              # lideo4linux2 lib, not available
        - "*libxpmem.so*"             # XPMEM, Linux Cross-Memory Attach kernel module, not available
      ignore_run_exports:
        # we support cuda-version >= 12.6, < 13
        - cuda-version
      post-link: post-link
    files:
      - lib/libholoscan*.so.*
      - lib/gxf_extensions
      - lib/libgxf*.so
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}
        - {{ stdlib("c") }}
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
      host:
        - cuda-version {{ cuda_version }}
        - cuda-nvrtc-dev
        - libjpeg-turbo
        - libnpp-dev
        - libtorch {{ libtorch_version }}
        - libtorch * cuda*
        - libvulkan-loader
        - openssl
        - ucx {{ ucx_version }}
        - onnxruntime-cpp  {{ onnx_version }}
      run:
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
        - {{ pin_compatible("cuda-version", max_pin="x") }}  # [cuda_compiler_version != "None"]
        - cloudpickle
        - cuda-cudart
        - dbus              # [aarch64]  # Without this, segfault happens during camera app test in https://github.com/nvidia-holoscan/holoscan-sdk/tree/main/python
        - libegl
        - libjpeg-turbo
        - libtorch * cuda*
        - libvulkan-loader
    test:
      commands:
        - test -L $PREFIX/lib/libholoscan_core.so.{{ abiversion }}
        - test -L $PREFIX/lib/libholoscan_infer.so.{{ abiversion }}
        - test -L $PREFIX/lib/libholoscan_infer_onnx_runtime.so.{{ abiversion }}
        - test -L $PREFIX/lib/libholoscan_infer_torch.so.{{ abiversion }}
        - test -L $PREFIX/lib/libholoscan_infer_utils.so.{{ abiversion }}
        - test -L $PREFIX/lib/libholoscan_logger.so.{{ abiversion }}
        - test -L $PREFIX/lib/libholoscan_op_async_ping_rx.so.{{ abiversion }}
        - test -L $PREFIX/lib/libholoscan_op_async_ping_tx.so.{{ abiversion }}
        - test -L $PREFIX/lib/libholoscan_op_bayer_demosaic.so.{{ abiversion }}
        - test -L $PREFIX/lib/libholoscan_op_format_converter.so.{{ abiversion }}
        - test -L $PREFIX/lib/libholoscan_op_gxf_codelet.so.{{ abiversion }}
        - test -L $PREFIX/lib/libholoscan_op_holoviz.so.{{ abiversion }}
        - test -L $PREFIX/lib/libholoscan_op_inference.so.{{ abiversion }}
        - test -L $PREFIX/lib/libholoscan_op_inference_processor.so.{{ abiversion }}
        - test -L $PREFIX/lib/libholoscan_op_ping_rx.so.{{ abiversion }}
        - test -L $PREFIX/lib/libholoscan_op_ping_tensor_rx.so.{{ abiversion }}
        - test -L $PREFIX/lib/libholoscan_op_ping_tensor_tx.so.{{ abiversion }}
        - test -L $PREFIX/lib/libholoscan_op_ping_tx.so.{{ abiversion }}
        - test -L $PREFIX/lib/libholoscan_op_segmentation_postprocessor.so.{{ abiversion }}
        - test -L $PREFIX/lib/libholoscan_op_v4l2.so.{{ abiversion }}
        - test -L $PREFIX/lib/libholoscan_op_video_stream_recorder.so.{{ abiversion }}
        - test -L $PREFIX/lib/libholoscan_op_video_stream_replayer.so.{{ abiversion }}
        - test -L $PREFIX/lib/libholoscan_profiler.so.{{ abiversion }}
        - test -L $PREFIX/lib/libholoscan_spdlog_logger.so.{{ abiversion }}
        - test -L $PREFIX/lib/libholoscan_viz.so.{{ abiversion }}
        - test -f $PREFIX/lib/libholoscan_core.so.{{ libversion }}
        - test -f $PREFIX/lib/libholoscan_infer.so.{{ libversion }}
        - test -f $PREFIX/lib/libholoscan_infer_onnx_runtime.so.{{ libversion }}
        - test -f $PREFIX/lib/libholoscan_infer_torch.so.{{ libversion }}
        - test -f $PREFIX/lib/libholoscan_infer_utils.so.{{ libversion }}
        - test -f $PREFIX/lib/libholoscan_logger.so.{{ libversion }}
        - test -f $PREFIX/lib/libholoscan_op_async_ping_rx.so.{{ libversion }}
        - test -f $PREFIX/lib/libholoscan_op_async_ping_tx.so.{{ libversion }}
        - test -f $PREFIX/lib/libholoscan_op_bayer_demosaic.so.{{ libversion }}
        - test -f $PREFIX/lib/libholoscan_op_format_converter.so.{{ libversion }}
        - test -f $PREFIX/lib/libholoscan_op_gxf_codelet.so.{{ libversion }}
        - test -f $PREFIX/lib/libholoscan_op_holoviz.so.{{ libversion }}
        - test -f $PREFIX/lib/libholoscan_op_inference.so.{{ libversion }}
        - test -f $PREFIX/lib/libholoscan_op_inference_processor.so.{{ libversion }}
        - test -f $PREFIX/lib/libholoscan_op_ping_rx.so.{{ libversion }}
        - test -f $PREFIX/lib/libholoscan_op_ping_tensor_rx.so.{{ libversion }}
        - test -f $PREFIX/lib/libholoscan_op_ping_tensor_tx.so.{{ libversion }}
        - test -f $PREFIX/lib/libholoscan_op_ping_tx.so.{{ libversion }}
        - test -f $PREFIX/lib/libholoscan_op_segmentation_postprocessor.so.{{ libversion }}
        - test -f $PREFIX/lib/libholoscan_op_v4l2.so.{{ libversion }}
        - test -f $PREFIX/lib/libholoscan_op_video_stream_recorder.so.{{ libversion }}
        - test -f $PREFIX/lib/libholoscan_op_video_stream_replayer.so.{{ libversion }}
        - test -f $PREFIX/lib/libholoscan_profiler.so.{{ libversion }}
        - test -f $PREFIX/lib/libholoscan_spdlog_logger.so.{{ libversion }}
        - test -f $PREFIX/lib/libholoscan_viz.so.{{ libversion }}
        - test -f $PREFIX/lib/libgxf_app.so
        - test -f $PREFIX/lib/libgxf_core.so
        - test -f $PREFIX/lib/libgxf_cuda.so
        - test -f $PREFIX/lib/libgxf_logger.so
        - test -f $PREFIX/lib/libgxf_multimedia.so
        - test -f $PREFIX/lib/libgxf_rmm.so
        - test -f $PREFIX/lib/libgxf_sample.so
        - test -f $PREFIX/lib/libgxf_serialization.so
        - test -f $PREFIX/lib/libgxf_std.so
        - test -f $PREFIX/lib/libgxf_ucx.so
        - test -f $PREFIX/lib/gxf_extensions/libgxf_holoscan_wrapper.so
        - test -f $PREFIX/lib/gxf_extensions/libgxf_holoscan_wrapper_lib.so
        - test -f $PREFIX/lib/gxf_extensions/libgxf_ucx_holoscan.so
        - test -f $PREFIX/lib/gxf_extensions/libgxf_ucx_holoscan_lib.so
    about:
      license: LicenseRef-NVIDIA-End-User-License-Agreement
      license_file:
        - LICENSE
        - NOTICE
      license_url: https://developer.download.nvidia.com/assets/Clara/NVIDIA_Clara_EULA.pdf
      summary: NVIDIA Holoscan runtime library
      description: |
        This is a runtime package only. Developers should install holoscan (python) and/or libholoscan-dev (C++ SDK) to build with Holoscan

  - name: holoscan
    files:
      #- lib/python{{ python_version }}/site-packages/gxf  # Dropped GXP support in holoscan 3.3.0 with GXF 5.5.0. It may be added back in the future.
      - lib/python{{ python_version }}/site-packages/holoscan
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ stdlib("c") }}
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
      host:
        - {{ pin_subpackage("libholoscan", exact=True) }}
        - cuda-version {{ cuda_version }}
        - python ={{ python_version }}
      run:
        - cupy
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
        - {{ pin_subpackage("libholoscan", exact=True) }}
        - cuda-cudart
    test:
      imports:
        - holoscan
        #- gxf  # Dropped GXP support in holoscan 3.3.0 with GXF 5.5.0. It may be added back in the future
      requires:
        - pip
      commands:
        #- test -d $PREFIX/lib/python{{ python_version }}/site-packages/gxf  # Dropped GXP support in holoscan 3.3.0 with GXF 5.5.0. It may be added back in the future.
        - test -d $PREFIX/lib/python{{ python_version }}/site-packages/holoscan
        - pip check
    about:
      license: LicenseRef-NVIDIA-End-User-License-Agreement
      license_file:
        - LICENSE
        - NOTICE
      license_url: https://developer.download.nvidia.com/assets/Clara/NVIDIA_Clara_EULA.pdf
      summary: NVIDIA Holoscan python bindings
      description: |
        NVIDIA Holoscan python bindings

  - name: libholoscan-dev
    build:
      run_exports:
        - {{ pin_subpackage("libholoscan", max_pin="x") }}
    files:
      - bin/convert_gxf_entities_to_images.py
      - bin/convert_gxf_entities_to_video.py
      - bin/convert_video_to_gxf_entities.py
      - bin/ctest_time_comparison.py
      - bin/download_ngc_data
      - bin/generate_extension_uuids.py
      - bin/generate_gxf_manifest.py
      - bin/graph_surgeon.py
      - bin/gxe
      - bin/gxf_entity_codec.py
      - bin/get_cmake_cuda_archs.py
      - bin/holoscan
      - bin/video_validation.py
      - examples/
      - include/3rdparty
      - include/fmt
      - include/gxf
      - include/gxf_holoscan_wrapper
      - include/holoinfer
      - include/holoscan
      - include/holoviz
      - include/magic_enum.hpp
      - include/rmm
      - lib/libholoscan*.so
      - lib/cmake/holoscan/holoscan-targets-release.cmake
      - lib/cmake/holoscan/wrap_operator_as_gxf_template/extension.cpp.in
      - lib/cmake/holoscan/wrap_operator_as_gxf_template/codelet.cpp.in
      - lib/cmake/holoscan/wrap_operator_as_gxf_template/codelet.hpp.in
      - lib/cmake/holoscan/HoloscanDownloadData.cmake
      - lib/cmake/holoscan/holoscan-config.cmake
      - lib/cmake/holoscan/WrapOperatorAsGXFExtension.cmake
      - lib/cmake/holoscan/GenerateGXEApp.cmake
      - lib/cmake/holoscan/holoscan-config-version.cmake
      - lib/cmake/holoscan/wrap_resource_as_gxf_template/component.cpp.in
      - lib/cmake/holoscan/wrap_resource_as_gxf_template/component.hpp.in
      - lib/cmake/holoscan/WrapAsGXFComponent.cmake
      - lib/cmake/holoscan/holoscan-targets.cmake
      - lib/cmake/holoscan/holoscan-dependencies.cmake
      - lib/libholo*.a
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ stdlib("c") }}
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
      host:
        - {{ pin_subpackage("libholoscan", exact=True) }}
        - cuda-version {{ cuda_version }}
        - python ={{ python_version }}
      run:
        - {{ pin_subpackage("libholoscan", exact=True) }}
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
        - cuda-nvcc         # holoscan wants to explicitly install this as it is needed for holoscan public interface
        - cuda-cudart
        - cuda-cudart-dev   # holoscan wants to explicitly install this as it is needed for holoscan public interface
        - cuda-nvrtc-dev    # holoscan wants to explicitly install this as it is needed for holoscan public interface
        - libnpp-dev        # holoscan wants to explicitly install this as it is needed for holoscan public interface
        - yaml-cpp          # holoscan wants to explicitly install this as it is needed for holoscan public interface
    test:
      requires:
        - cmake
        - make
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ stdlib("c") }}
        - cuda-version {{ cuda_version }}
        - cuda   # need entire CTK to compile all examples
        - patch  # needed by one of the examples
      files:
        - compile_examples.sh
      source_files:
        - lib/libyaml-cpp.a
      commands:
        - test -f $PREFIX/bin/convert_gxf_entities_to_images.py
        - test -f $PREFIX/bin/convert_gxf_entities_to_video.py
        - test -f $PREFIX/bin/convert_video_to_gxf_entities.py
        - test -f $PREFIX/bin/ctest_time_comparison.py
        - test -f $PREFIX/bin/download_ngc_data
        - test -f $PREFIX/bin/generate_extension_uuids.py
        - test -f $PREFIX/bin/generate_gxf_manifest.py
        - test -f $PREFIX/bin/graph_surgeon.py
        - test -f $PREFIX/bin/gxe
        - test -f $PREFIX/bin/gxf_entity_codec.py
        - test -f $PREFIX/bin/get_cmake_cuda_archs.py
        - test -f $PREFIX/bin/holoscan
        - test -f $PREFIX/bin/video_validation.py
        - test -d $PREFIX/lib/cmake/holoscan
        - test -d $PREFIX/examples
        - test -d $PREFIX/include/3rdparty
        - test -d $PREFIX/include/fmt
        - test -d $PREFIX/include/gxf
        - test -d $PREFIX/include/gxf_holoscan_wrapper
        - test -d $PREFIX/include/holoinfer
        - test -d $PREFIX/include/holoscan
        - test -d $PREFIX/include/holoviz
        - test -f $PREFIX/include/magic_enum.hpp
        - test -d $PREFIX/include/rmm
        - test -L $PREFIX/lib/libholoscan_core.so
        - test -L $PREFIX/lib/libholoscan_infer.so
        - test -L $PREFIX/lib/libholoscan_infer_onnx_runtime.so
        - test -L $PREFIX/lib/libholoscan_infer_torch.so
        - test -L $PREFIX/lib/libholoscan_infer_utils.so
        - test -L $PREFIX/lib/libholoscan_logger.so
        - test -L $PREFIX/lib/libholoscan_op_async_ping_rx.so
        - test -L $PREFIX/lib/libholoscan_op_async_ping_tx.so
        - test -L $PREFIX/lib/libholoscan_op_bayer_demosaic.so
        - test -L $PREFIX/lib/libholoscan_op_format_converter.so
        - test -L $PREFIX/lib/libholoscan_op_gxf_codelet.so
        - test -L $PREFIX/lib/libholoscan_op_holoviz.so
        - test -L $PREFIX/lib/libholoscan_op_inference.so
        - test -L $PREFIX/lib/libholoscan_op_inference_processor.so
        - test -L $PREFIX/lib/libholoscan_op_ping_rx.so
        - test -L $PREFIX/lib/libholoscan_op_ping_tensor_rx.so
        - test -L $PREFIX/lib/libholoscan_op_ping_tensor_tx.so
        - test -L $PREFIX/lib/libholoscan_op_ping_tx.so
        - test -L $PREFIX/lib/libholoscan_op_segmentation_postprocessor.so
        - test -L $PREFIX/lib/libholoscan_op_v4l2.so
        - test -L $PREFIX/lib/libholoscan_op_video_stream_recorder.so
        - test -L $PREFIX/lib/libholoscan_op_video_stream_replayer.so
        - test -L $PREFIX/lib/libholoscan_profiler.so
        - test -L $PREFIX/lib/libholoscan_spdlog_logger.so
        - test -L $PREFIX/lib/libholoscan_viz.so
        - test -f $PREFIX/lib/libholoviz_imgui.a
        - bash compile_examples.sh

about:
  home: https://docs.nvidia.com/cuda/holoscan/
  license: LicenseRef-NVIDIA-End-User-License-Agreement
  license_file:
    - LICENSE
    - NOTICE
  license_url: https://developer.download.nvidia.com/assets/Clara/NVIDIA_Clara_EULA.pdf
  summary: NVIDIA Holoscan is the AI sensor processing platform that combines hardware systems for low-latency sensor and network connectivity, optimized libraries for data processing and AI, and core microservices to run streaming, imaging, and other applications, from embedded to edge to cloud.
  description: |
    NVIDIA Holoscan is the AI sensor processing platform that combines hardware systems for low-latency sensor and network connectivity, optimized libraries for data processing and AI, and core microservices to run streaming, imaging, and other applications, from embedded to edge to cloud.
    It can be used to build streaming AI pipelines for a variety of domains, including Medical Devices, High Performance Computing at the Edge, Industrial Inspection and more.
  doc_url: https://docs.nvidia.com/cuda/holoscan/

extra:
  recipe-maintainers:
    - conda-forge/cuda
  feedstock-name: holoscan
